{"version":3,"file":"static/iframe.1d7e59a4ee5e9b5eb91f.bundle.js","sources":["webpack:///./src/utils/info-config.ts","webpack:///./src/components/elements/Button/Button.tsx","webpack:///./src/components/elements/Text/Text.tsx"],"sourcesContent":["// defaults for all stories\nexport const infoConfig = {\n  info: {\n    inline: true,\n    header: false,\n    styles: {\n      infoBody: {\n        marginTop: '50px',\n        padding: '20px',\n        lineHeight: '2',\n      },\n      source: {\n        h1: {\n          margin: '0',\n        },\n      },\n    },\n  },\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { darken, lighten } from 'polished';\n\nimport { setDimensions } from '../../../utils/style-helpers';\nimport { getButtonColor } from './buttonHelpers';\n\nexport enum ButtonSizeEnum {\n  normal = 'normal',\n  small = 'small',\n  large = 'large',\n}\n\nexport enum ButtonTypeEnum {\n  default = 'default',\n  primary = 'primary',\n  success = 'success',\n  warning = 'warning',\n  danger = 'danger',\n}\n\nexport interface ButtonProps {\n  /** @default normal */\n  /** button size */\n  size?: 'normal' | 'small' | 'large';\n  /** button type */\n  type?: 'default' | 'primary' | 'success' | 'warning' | 'danger';\n  /** ghost */\n  ghost?: boolean;\n  /** rounded */\n  rounded?: boolean;\n  /** circle */\n  circle?: string;\n  /** fluid */\n  fluid?: boolean;\n  /** text */\n  text?: boolean;\n  /** loading */\n  loading?: boolean;\n  /** href link */\n  href?: any;\n  /** content */\n  children: React.ReactNode;\n}\n\nconst StyledButton = styled.button<ButtonProps>`\n  border: none;\n  margin: 0;\n  padding: 8px 20px;\n  width: auto;\n  overflow: visible;\n  font: inherit;\n  text-decoration: none;\n  text-align: center;\n  line-height: inherit;\n  -webkit-appearance: none;\n  outline: none;\n  user-select: none;\n  cursor: pointer;\n\n  color: ${props =>\n    (props.ghost && (props.type && props.theme[props.type])) || 'white'};\n  color: ${props =>\n    !props.ghost && props.type === ButtonTypeEnum.default && 'black'};\n  color: ${props => props.text && props.theme.primary};\n\n  background-color: ${props =>\n    getButtonColor({ theme: props.theme, type: props.type })};\n  background-color: ${props => props.ghost && 'transparent'};\n  background-color: ${props => props.text && 'transparent'};\n\n  opacity: ${props => (props.disabled || props.loading) && 0.7};\n\n  border: ${props =>\n    props.ghost &&\n    `1px solid ${getButtonColor({ theme: props.theme, type: props.type })}`};\n\n  border-radius: ${props => props.rounded && '20px'};\n  border-radius: ${props => props.circle && '50%'};\n\n  width: ${props => props.fluid && '100%'};\n\n  ${props => props.circle && setDimensions(props.circle, props.circle)}\n  padding: ${props => props.circle && '0px'};\n  line-height: ${props => props.circle && '100%'};\n\n  font-size: ${props => {\n    if (props.size === ButtonSizeEnum.normal) {\n      return '14px';\n    }\n    if (props.size === ButtonSizeEnum.small) {\n      return '10px';\n    }\n    if (props.size === ButtonSizeEnum.large) {\n      return '20px';\n    }\n    return;\n  }};\n\n  pointer-events: ${props => (props.disabled || props.loading) && 'none'};\n\n  transition: background-color 200ms, color 200ms;\n\n  &:hover {\n    background-color: ${props =>\n      !props.ghost\n        ? darken(0.1, getButtonColor({ theme: props.theme, type: props.type }))\n        : getButtonColor({ theme: props.theme, type: props.type })};\n    background-color: ${props => props.text && 'transparent'};\n    color: ${props => props.ghost && 'white'};\n    color: ${props => props.text && darken(0.1, props.theme.primary)}\n  }\n\n  &:focus {\n    background-color: ${props =>\n      lighten(0.05, getButtonColor({ theme: props.theme, type: props.type }))};\n    background-color: ${props => props.text && 'transparent'};\n    color: ${props => props.ghost && 'white'};\n    color: ${props => props.text && lighten(0.05, props.theme.primary)}\n  }\n\n  &:active {\n    background-color: ${props =>\n      darken(0.1, getButtonColor({ theme: props.theme, type: props.type }))};\n    background-color: ${props => props.text && 'transparent'};\n    color: ${props => props.ghost && 'white'};\n    color: ${props => props.text && lighten(0.05, props.theme.primary)}\n  }\n`;\n\nexport const Button = ({\n  children,\n  href,\n  rounded,\n  circle,\n  fluid,\n  ghost,\n  type = 'default',\n  disabled,\n  text,\n  loading,\n  size = ButtonSizeEnum.normal,\n  ...rest\n}: ButtonProps &\n  React.ButtonHTMLAttributes<HTMLButtonElement> &\n  React.AnchorHTMLAttributes<HTMLAnchorElement>) => {\n  return (\n    <StyledButton\n      as={href && 'a'}\n      href={href}\n      size={size}\n      type={type}\n      rounded={rounded}\n      circle={circle}\n      ghost={ghost}\n      fluid={fluid}\n      disabled={disabled}\n      text={text}\n      loading={loading}\n      {...rest}\n    >\n      {children}\n    </StyledButton>\n  );\n};\n\nexport default Button;\ntry {\n    // @ts-ignore\n    Button.displayName = \"Button\";\n    // @ts-ignore\n    Button.__docgenInfo = { \"description\": \"\", \"displayName\": \"Button\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/elements/Button/Button.tsx#Button\"] = { docgenInfo: Button.__docgenInfo, name: \"Button\", path: \"src/components/elements/Button/Button.tsx#Button\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react';\nimport styled from 'styled-components';\n\nimport { truncateStyles } from '../../../utils/style-helpers';\n\nexport enum TextTagEnum {\n  p = 'p',\n  span = 'span',\n  strong = 'strong',\n  em = 'em',\n}\n\nexport interface TextProps {\n  /** @default p */\n  /** tag of text */\n  tag?: 'p' | 'span' | 'strong' | 'em';\n  /** content */\n  children: React.ReactNode;\n  /** if text should be uppercased */\n  uppercase?: boolean;\n  /** if text should be underlined */\n  underline?: boolean;\n  /** if text should be truncated... */\n  truncate?: string;\n}\n\nconst StyledText = styled.p<TextProps>`\n  text-decoration: ${props => props.underline && 'underline'};\n  text-transform: ${props => props.uppercase && 'uppercase'};\n  ${props => props.truncate && truncateStyles(props.truncate)};\n`;\n\nexport const Text = ({\n  tag = TextTagEnum.p,\n  children,\n  uppercase,\n  underline,\n  truncate,\n  ...rest\n}: TextProps &\n  React.HTMLAttributes<HTMLParagraphElement | HTMLSpanElement>) => {\n  return (\n    <StyledText\n      as={tag}\n      uppercase={uppercase}\n      underline={underline}\n      truncate={truncate}\n      {...rest}\n    >\n      {children}\n    </StyledText>\n  );\n};\n\nexport default Text;\ntry {\n    // @ts-ignore\n    Text.displayName = \"Text\";\n    // @ts-ignore\n    Text.__docgenInfo = { \"description\": \"\", \"displayName\": \"Text\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/elements/Text/Text.tsx#Text\"] = { docgenInfo: Text.__docgenInfo, name: \"Text\", path: \"src/components/elements/Text/Text.tsx#Text\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAAA;;;;;;;;;;;;;;;AC4DA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;;;;AAIA;AAIA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;;AAIA;ACvGA;AACA;AACA;AAGA","sourceRoot":""}