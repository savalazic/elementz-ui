{"version":3,"file":"main.0da431595f8e8974f55d.bundle.js","sources":["webpack:///./src/components/utilities/ThemeProvider/ThemeProvider.tsx","webpack:///./src/components/elements/Modal/Modal.tsx","webpack:///./src/components/elements/Text/Text.tsx","webpack:///./src/components/elements/Image/Image.tsx","webpack:///./src/components/elements/Button/Button.tsx","webpack:///./src/components/elements/Spinner/Spinner.tsx"],"sourcesContent":["import React from 'react';\nimport { ThemeProvider as StyledThemeProvider } from 'styled-components';\n\nexport interface ThemeProps {\n  children: React.ReactNode;\n  theme?: {\n    default?: string;\n    primary?: string;\n    success?: string;\n    warning?: string;\n    danger?: string;\n    typography?: {\n      fontSize: number;\n      headingFontSize: number;\n      paragraphLineHeight: number;\n      headingLineHeight: number;\n      textMargin: number;\n    };\n  };\n}\n\nexport const defaultTheme = {\n  default: '#e1e1e1',\n  primary: '#409eff',\n  success: '#67c23a',\n  warning: '#e6a23c',\n  danger: '#f56c6c',\n  colors: {\n    default: '#e1e1e1',\n    primary: '#409eff',\n    success: '#67c23a',\n    warning: '#e6a23c',\n    danger: '#f56c6c',\n  },\n  typography: {\n    fontSize: 16,\n    headingFontSize: 40,\n    paragraphLineHeight: 1.5,\n    headingLineHeight: 1.25,\n    textMargin: 20,\n  },\n};\n\nexport const ThemeProvider = ({\n  theme = defaultTheme,\n  children,\n}: ThemeProps) => (\n  <StyledThemeProvider theme={theme}>\n    <React.Fragment>{children}</React.Fragment>\n  </StyledThemeProvider>\n);\ntry {\n    // @ts-ignore\n    ThemeProvider.displayName = \"ThemeProvider\";\n    // @ts-ignore\n    ThemeProvider.__docgenInfo = { \"description\": \"\", \"displayName\": \"ThemeProvider\", \"props\": { \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"{ default?: string; primary?: string; success?: string; warning?: string; danger?: string; typography?: { fontSize: number; headingFontSize: number; paragraphLineHeight: number; headingLineHeight: number; textMargin: number; }; }\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/utilities/ThemeProvider/ThemeProvider.tsx#ThemeProvider\"] = { docgenInfo: ThemeProvider.__docgenInfo, name: \"ThemeProvider\", path: \"src/components/utilities/ThemeProvider/ThemeProvider.tsx#ThemeProvider\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React, { Component } from 'react';\nimport FocusLock from 'react-focus-lock';\nimport styled from 'styled-components';\nimport { Transition } from 'react-transition-group';\n\nimport { Portal } from './Portal';\nimport { ClickOutsideWrapper } from '../../wrappers';\n\ntype TransitionState = 'entering' | 'entered' | 'exiting' | 'exited';\ninterface TransitionProps {\n  state: TransitionState;\n}\n\nexport interface ModalProps {\n  /** open  */\n  isOpen?: boolean;\n  /** on click outside */\n  handleClickOutside?: () => void;\n  /** content */\n  children: React.ReactNode;\n  /** transition settings */\n  transition: {\n    speed: number;\n  };\n}\n\n// tslint:disable-next-line\nconst noop = () => {};\n\nconst opacityMap = {\n  entering: 0,\n  entered: 1,\n  exiting: 0,\n  exited: 0,\n};\n\nconst transformMap = {\n  entering: 'translate(-50%, -45%)',\n  entered: 'translate(-50%, -50%)',\n  exiting: 'translate(-50%, -45%)',\n  exited: 'translate(-50%, -45%)',\n};\n\nconst StyledOverlay = styled.div<ModalProps & TransitionProps>`\n  background: rgba(0, 0, 0, 0.75);\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  transition: all ${props => props.transition.speed}ms;\n  opacity: ${(props: TransitionProps) => opacityMap[props.state]};\n`;\n\nconst StyledModal = styled.div<ModalProps & TransitionProps>`\n  padding: 20px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #fff;\n\n  transition: all ${props => props.transition.speed}ms;\n  transform: ${(props: TransitionProps) => transformMap[props.state]};\n`;\n\nexport class Modal extends Component<ModalProps> {\n  public static defaultProps = {\n    transition: {\n      speed: 300,\n    },\n  };\n\n  public render() {\n    return (\n      <Portal>\n        <Transition\n          in={this.props.isOpen}\n          timeout={this.props.transition.speed}\n          mountOnEnter\n          unmountOnExit\n        >\n          {(state: TransitionState) => (\n            <StyledOverlay\n              state={state}\n              transition={{ speed: this.props.transition.speed }}\n            >\n              <FocusLock>\n                <ClickOutsideWrapper\n                  onClickOutside={this.props.handleClickOutside || noop}\n                >\n                  <StyledModal\n                    state={state}\n                    transition={{ speed: this.props.transition.speed }}\n                    aria-modal=\"true\"\n                    role=\"dialog\"\n                    {...this.props}\n                  >\n                    {this.props.children}\n                  </StyledModal>\n                </ClickOutsideWrapper>\n              </FocusLock>\n            </StyledOverlay>\n          )}\n        </Transition>\n      </Portal>\n    );\n  }\n}\ntry {\n    // @ts-ignore\n    Modal.displayName = \"Modal\";\n    // @ts-ignore\n    Modal.__docgenInfo = { \"description\": \"\", \"displayName\": \"Modal\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"content\", \"name\": \"children\", \"required\": true, \"type\": { \"name\": \"any\" } }, \"isOpen\": { \"defaultValue\": null, \"description\": \"open\", \"name\": \"isOpen\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"handleClickOutside\": { \"defaultValue\": null, \"description\": \"on click outside\", \"name\": \"handleClickOutside\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"transition\": { \"defaultValue\": { value: \"{\\n      speed: 300,\\n    }\" }, \"description\": \"transition settings\", \"name\": \"transition\", \"required\": true, \"type\": { \"name\": \"{ speed: number; }\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/elements/Modal/Modal.tsx#Modal\"] = { docgenInfo: Modal.__docgenInfo, name: \"Modal\", path: \"src/components/elements/Modal/Modal.tsx#Modal\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react';\nimport styled from 'styled-components';\nimport { rem, stripUnit, ellipsis } from 'polished';\nimport { themeGet } from '../../../utils/theme-helpers';\n\nexport enum TextTagEnum {\n  p = 'p',\n  span = 'span',\n  strong = 'strong',\n  em = 'em',\n  h1 = 'h1',\n  h2 = 'h2',\n  h3 = 'h3',\n  h4 = 'h4',\n  h5 = 'h5',\n  h6 = 'h6',\n}\n\ntype NativeTextProps = React.HTMLAttributes<\n  HTMLParagraphElement | HTMLSpanElement | HTMLHeadingElement\n>;\n\nexport interface TextProps extends NativeTextProps {\n  /** @default p */\n  /** tag of text */\n  tag?:\n    | 'p'\n    | 'span'\n    | 'strong'\n    | 'em'\n    | 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'h5'\n    | 'h6';\n  /** content */\n  children: React.ReactNode;\n  /** if text should be uppercased */\n  uppercase?: boolean;\n  /** if text should be underlined */\n  underline?: boolean;\n  /** if text should be truncated... */\n  truncate?: string;\n}\n\nconst StyledText = styled.p<TextProps & { as: string }>`\n  text-decoration: ${props => props.underline && 'underline'};\n  text-transform: ${props => props.uppercase && 'uppercase'};\n  ${props => props.truncate && ellipsis(props.truncate)};\n\n  ${props => {\n    if (props.as && props.as.startsWith('h')) {\n      return `\n        margin-top: ${themeGet('typography.textMargin')(props) * 1.2 * 1.5}px;\n        line-height: ${themeGet('typography.headingLineHeight')(props)}em;\n      `;\n    }\n\n    return `\n      font-size: ${rem(themeGet('typography.fontSize')(props))};\n      margin-bottom: ${themeGet('typography.textMargin')(props)}px;\n      line-height: ${themeGet('typography.paragraphLineHeight')(props)}em;\n    `;\n  }}\n\n  ${props => {\n    const hFontSize = rem(themeGet('typography.headingFontSize')(props));\n    const textMargin: any = stripUnit(themeGet('typography.textMargin')(props));\n\n    if (props.as === TextTagEnum.h1) {\n      return `\n        font-size: ${hFontSize};\n        margin-bottom: ${textMargin * 1.2}px;\n      `;\n    }\n    if (props.as === TextTagEnum.h2) {\n      return `\n        font-size: ${(stripUnit(hFontSize) as number) / 1.3}rem;\n        margin-bottom: ${(textMargin * 1.2) / 1.3}px;\n      `;\n    }\n    if (props.as === TextTagEnum.h3) {\n      return `\n        font-size: ${(stripUnit(hFontSize) as number) / 1.5}rem;\n        margin-bottom: ${(textMargin * 1.2) / 1.5}px;\n      `;\n    }\n    if (props.as === TextTagEnum.h4) {\n      return `\n        font-size: ${(stripUnit(hFontSize) as number) / 1.7}rem;\n        margin-bottom: ${(textMargin * 1.2) / 1.7}px;\n      `;\n    }\n    if (props.as === TextTagEnum.h5) {\n      return `\n        font-size: ${(stripUnit(hFontSize) as number) / 1.8}rem;\n        margin-bottom: ${(textMargin * 1.2) / 1.8}px;\n      `;\n    }\n    if (props.as === TextTagEnum.h6) {\n      return `\n        font-size: ${(stripUnit(hFontSize) as number) / 2}rem;\n        margin-bottom: ${(textMargin * 1.2) / 2}px;\n      `;\n    }\n\n    return null;\n  }};\n`;\n\nexport const Text = ({\n  tag = TextTagEnum.p,\n  children,\n  uppercase,\n  underline,\n  truncate,\n  ...rest\n}: TextProps) => {\n  return (\n    <StyledText\n      as={tag}\n      uppercase={uppercase}\n      underline={underline}\n      truncate={truncate}\n      {...rest}\n    >\n      {children}\n    </StyledText>\n  );\n};\ntry {\n    // @ts-ignore\n    Text.displayName = \"Text\";\n    // @ts-ignore\n    Text.__docgenInfo = { \"description\": \"\", \"displayName\": \"Text\", \"props\": { \"tag\": { \"defaultValue\": { value: \"p\" }, \"description\": \"tag of text\", \"name\": \"tag\", \"required\": false, \"type\": { \"name\": \"\\\"p\\\" | \\\"span\\\" | \\\"strong\\\" | \\\"em\\\" | \\\"h1\\\" | \\\"h2\\\" | \\\"h3\\\" | \\\"h4\\\" | \\\"h5\\\" | \\\"h6\\\"\" } }, \"children\": { \"defaultValue\": null, \"description\": \"content\", \"name\": \"children\", \"required\": true, \"type\": { \"name\": \"any\" } }, \"uppercase\": { \"defaultValue\": null, \"description\": \"if text should be uppercased\", \"name\": \"uppercase\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"underline\": { \"defaultValue\": null, \"description\": \"if text should be underlined\", \"name\": \"underline\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"truncate\": { \"defaultValue\": null, \"description\": \"if text should be truncated...\", \"name\": \"truncate\", \"required\": false, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/elements/Text/Text.tsx#Text\"] = { docgenInfo: Text.__docgenInfo, name: \"Text\", path: \"src/components/elements/Text/Text.tsx#Text\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react';\nimport styled from 'styled-components';\n\nexport interface ImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  /** image source */\n  src: string;\n  /** image alternate text */\n  alt: string;\n  /** rounded */\n  rounded?: string;\n  /** circle */\n  circle?: string;\n  /** square */\n  square?: string;\n}\n\nexport interface BackgroundImageProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  /** image source */\n  src: string;\n  /** @default center */\n  /** image position */\n  backgroundPosition?: 'center' | 'top' | 'right' | 'bottom' | 'left';\n  /** children */\n  children: React.ReactNode;\n}\n\nconst StyledImage = styled.img<ImageProps>`\n  max-width: 100%;\n  object-fit: cover;\n\n  border-radius: ${props => props.circle && '50%'};\n  border-radius: ${props => props.rounded};\n  width: ${props => props.circle || props.square};\n  height: ${props => props.circle || props.square};\n`;\n\nconst StyledBackgroundImage = styled.div<BackgroundImageProps>`\n  background-image: url(${props => props.src});\n  background-size: cover;\n  background-repeat: no-repeat;\n`;\n\nexport const Image = ({\n  src,\n  alt,\n  rounded,\n  circle,\n  square,\n  ...rest\n}: ImageProps) => (\n  <StyledImage\n    src={src}\n    alt={alt}\n    circle={circle}\n    rounded={rounded}\n    square={square}\n    {...rest}\n  />\n);\n\nexport const BackgroundImage = ({\n  src,\n  backgroundPosition = 'center',\n  children,\n  ...rest\n}: BackgroundImageProps) => (\n  <StyledBackgroundImage src={src} {...rest}>\n    {children}\n  </StyledBackgroundImage>\n);\ntry {\n    // @ts-ignore\n    Image.displayName = \"Image\";\n    // @ts-ignore\n    Image.__docgenInfo = { \"description\": \"\", \"displayName\": \"Image\", \"props\": { \"src\": { \"defaultValue\": null, \"description\": \"image source\", \"name\": \"src\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"alt\": { \"defaultValue\": null, \"description\": \"image alternate text\", \"name\": \"alt\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"rounded\": { \"defaultValue\": null, \"description\": \"rounded\", \"name\": \"rounded\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"circle\": { \"defaultValue\": null, \"description\": \"circle\", \"name\": \"circle\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"square\": { \"defaultValue\": null, \"description\": \"square\", \"name\": \"square\", \"required\": false, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/elements/Image/Image.tsx#Image\"] = { docgenInfo: Image.__docgenInfo, name: \"Image\", path: \"src/components/elements/Image/Image.tsx#Image\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    BackgroundImage.displayName = \"BackgroundImage\";\n    // @ts-ignore\n    BackgroundImage.__docgenInfo = { \"description\": \"\", \"displayName\": \"BackgroundImage\", \"props\": { \"src\": { \"defaultValue\": null, \"description\": \"image source\", \"name\": \"src\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"backgroundPosition\": { \"defaultValue\": { value: \"center\" }, \"description\": \"image position\", \"name\": \"backgroundPosition\", \"required\": false, \"type\": { \"name\": \"\\\"center\\\" | \\\"top\\\" | \\\"right\\\" | \\\"bottom\\\" | \\\"left\\\"\" } }, \"children\": { \"defaultValue\": null, \"description\": \"children\", \"name\": \"children\", \"required\": true, \"type\": { \"name\": \"any\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/elements/Image/Image.tsx#BackgroundImage\"] = { docgenInfo: BackgroundImage.__docgenInfo, name: \"BackgroundImage\", path: \"src/components/elements/Image/Image.tsx#BackgroundImage\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react';\nimport styled from 'styled-components';\nimport { darken, lighten } from 'polished';\n\nimport {\n  setDimensions,\n  alignVertical,\n  setDisabled,\n} from '../../../utils/style-helpers';\nimport { getButtonColor } from './buttonHelpers';\nimport { LoadingWrapper } from '../../wrappers';\nimport { Spinner } from '../Spinner';\n\nexport enum ButtonSizeEnum {\n  normal = 'normal',\n  small = 'small',\n  large = 'large',\n}\n\nexport enum ButtonTypeEnum {\n  default = 'default',\n  primary = 'primary',\n  success = 'success',\n  warning = 'warning',\n  danger = 'danger',\n}\n\ntype NativeButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> &\n  React.AnchorHTMLAttributes<HTMLAnchorElement>;\n\nexport interface ButtonProps extends NativeButtonProps {\n  /** @default normal */\n  /** button size */\n  size?: 'normal' | 'small' | 'large';\n  /** button type */\n  type?: 'default' | 'primary' | 'success' | 'warning' | 'danger';\n  /** ghost */\n  ghost?: boolean;\n  /** rounded */\n  rounded?: boolean;\n  /** circle */\n  circle?: string;\n  /** fluid */\n  fluid?: boolean;\n  /** text */\n  text?: boolean;\n  /** align vertical - used if button has more elements */\n  alignVertical?: boolean;\n  /** href link */\n  href?: any;\n  /** content */\n  children: React.ReactNode;\n}\n\nexport interface LoadingButtonProps extends NativeButtonProps {\n  /** loading state */\n  isLoading?: boolean;\n}\n\nconst StyledButton = styled.button<ButtonProps>`\n  border: none;\n  margin: 0;\n  padding: 0.6em 1.3em 0.6em;\n  width: auto;\n  overflow: visible;\n  font: inherit;\n  text-decoration: none;\n  text-align: center;\n  line-height: inherit;\n  -webkit-appearance: none;\n  outline: none;\n  user-select: none;\n  cursor: pointer;\n  position: relative;\n\n  color: ${props =>\n    (props.ghost && (props.type && props.theme[props.type])) || 'white'};\n  color: ${props =>\n    !props.ghost && props.type === ButtonTypeEnum.default && 'black'};\n  color: ${props => props.text && props.theme.primary};\n\n  background-color: ${props =>\n    getButtonColor({ theme: props.theme, type: props.type })};\n  background-color: ${props => props.ghost && 'transparent'};\n  background-color: ${props => props.text && 'transparent'};\n\n  border: ${props =>\n    props.ghost &&\n    `1px solid ${getButtonColor({ theme: props.theme, type: props.type })}`};\n\n  border-radius: ${props => props.rounded && '20px'};\n  border-radius: ${props => props.circle && '50%'};\n\n  width: ${props => props.fluid && '100%'};\n\n  ${props => props.alignVertical && alignVertical()}\n\n  ${props => props.circle && setDimensions(props.circle, props.circle)}\n  padding: ${props => props.circle && '0px'};\n  line-height: ${props => props.circle && '100%'};\n\n  ${props => props.disabled && setDisabled()};\n\n  font-size: ${props => {\n    if (props.size === ButtonSizeEnum.normal) {\n      return '1rem';\n    }\n    if (props.size === ButtonSizeEnum.small) {\n      return '0.8rem';\n    }\n    if (props.size === ButtonSizeEnum.large) {\n      return '1.2rem';\n    }\n    return;\n  }};\n\n  transition: background-color 200ms, color 200ms;\n\n  &:hover {\n    background-color: ${props =>\n      !props.ghost\n        ? darken(0.1, getButtonColor({ theme: props.theme, type: props.type }))\n        : getButtonColor({ theme: props.theme, type: props.type })};\n    background-color: ${props => props.text && 'transparent'};\n    color: ${props => props.ghost && 'white'};\n    color: ${props => props.text && darken(0.1, props.theme.primary)}\n  }\n\n  &:focus {\n    background-color: ${props =>\n      lighten(0.05, getButtonColor({ theme: props.theme, type: props.type }))};\n    background-color: ${props => props.text && 'transparent'};\n    color: ${props => props.ghost && 'white'};\n    color: ${props => props.text && lighten(0.05, props.theme.primary)}\n  }\n\n  &:active {\n    background-color: ${props =>\n      darken(0.1, getButtonColor({ theme: props.theme, type: props.type }))};\n    background-color: ${props => props.text && 'transparent'};\n    color: ${props => props.ghost && 'white'};\n    color: ${props => props.text && lighten(0.05, props.theme.primary)}\n  }\n`;\n\nconst StyledLoadingButton = styled(StyledButton)<LoadingButtonProps>`\n  ${props => props.isLoading && setDisabled()};\n  overflow: hidden;\n`;\n\nexport const Button = ({\n  children,\n  href,\n  rounded,\n  circle,\n  fluid,\n  ghost,\n  type = 'default',\n  disabled,\n  text,\n  alignVertical: alignVerticalProp,\n  size = ButtonSizeEnum.normal,\n  ...rest\n}: ButtonProps) => {\n  return (\n    <StyledButton\n      as={href && 'a'}\n      href={href}\n      size={size}\n      type={type}\n      rounded={rounded}\n      circle={circle}\n      ghost={ghost}\n      fluid={fluid}\n      disabled={disabled}\n      text={text}\n      alignVertical={alignVerticalProp}\n      {...rest}\n    >\n      {children}\n    </StyledButton>\n  );\n};\n\nexport const LoadingButton = ({\n  isLoading: isLoadingProp = false,\n  children,\n  ...rest\n}: LoadingButtonProps & ButtonProps) => (\n  <LoadingWrapper isLoading={isLoadingProp}>\n    {({ isLoading }) => (\n      <StyledLoadingButton isLoading={isLoading} {...rest}>\n        {isLoading ? <Spinner size=\"15px\" /> : <span>{children}</span>}\n      </StyledLoadingButton>\n    )}\n  </LoadingWrapper>\n);\ntry {\n    // @ts-ignore\n    Button.displayName = \"Button\";\n    // @ts-ignore\n    Button.__docgenInfo = { \"description\": \"\", \"displayName\": \"Button\", \"props\": { \"size\": { \"defaultValue\": { value: \"normal\" }, \"description\": \"button size\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"\\\"normal\\\" | \\\"small\\\" | \\\"large\\\"\" } }, \"type\": { \"defaultValue\": null, \"description\": \"button type\", \"name\": \"type\", \"required\": false, \"type\": { \"name\": \"\\\"default\\\" | \\\"primary\\\" | \\\"success\\\" | \\\"warning\\\" | \\\"danger\\\"\" } }, \"ghost\": { \"defaultValue\": null, \"description\": \"ghost\", \"name\": \"ghost\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"rounded\": { \"defaultValue\": null, \"description\": \"rounded\", \"name\": \"rounded\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"circle\": { \"defaultValue\": null, \"description\": \"circle\", \"name\": \"circle\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"fluid\": { \"defaultValue\": null, \"description\": \"fluid\", \"name\": \"fluid\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"text\": { \"defaultValue\": null, \"description\": \"text\", \"name\": \"text\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"alignVertical\": { \"defaultValue\": null, \"description\": \"align vertical - used if button has more elements\", \"name\": \"alignVertical\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"href\": { \"defaultValue\": null, \"description\": \"href link\", \"name\": \"href\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"children\": { \"defaultValue\": null, \"description\": \"content\", \"name\": \"children\", \"required\": true, \"type\": { \"name\": \"any\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/elements/Button/Button.tsx#Button\"] = { docgenInfo: Button.__docgenInfo, name: \"Button\", path: \"src/components/elements/Button/Button.tsx#Button\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    LoadingButton.displayName = \"LoadingButton\";\n    // @ts-ignore\n    LoadingButton.__docgenInfo = { \"description\": \"\", \"displayName\": \"LoadingButton\", \"props\": { \"isLoading\": { \"defaultValue\": null, \"description\": \"loading state\", \"name\": \"isLoading\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"size\": { \"defaultValue\": { value: \"normal\" }, \"description\": \"button size\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"\\\"normal\\\" | \\\"small\\\" | \\\"large\\\"\" } }, \"type\": { \"defaultValue\": null, \"description\": \"button type\", \"name\": \"type\", \"required\": false, \"type\": { \"name\": \"\\\"default\\\" | \\\"primary\\\" | \\\"success\\\" | \\\"warning\\\" | \\\"danger\\\"\" } }, \"ghost\": { \"defaultValue\": null, \"description\": \"ghost\", \"name\": \"ghost\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"rounded\": { \"defaultValue\": null, \"description\": \"rounded\", \"name\": \"rounded\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"circle\": { \"defaultValue\": null, \"description\": \"circle\", \"name\": \"circle\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"fluid\": { \"defaultValue\": null, \"description\": \"fluid\", \"name\": \"fluid\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"text\": { \"defaultValue\": null, \"description\": \"text\", \"name\": \"text\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"alignVertical\": { \"defaultValue\": null, \"description\": \"align vertical - used if button has more elements\", \"name\": \"alignVertical\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"href\": { \"defaultValue\": null, \"description\": \"href link\", \"name\": \"href\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"children\": { \"defaultValue\": null, \"description\": \"content\", \"name\": \"children\", \"required\": true, \"type\": { \"name\": \"any\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/elements/Button/Button.tsx#LoadingButton\"] = { docgenInfo: LoadingButton.__docgenInfo, name: \"LoadingButton\", path: \"src/components/elements/Button/Button.tsx#LoadingButton\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { themeGet } from '../../../utils/theme-helpers';\n\nexport interface SpinnerProps {\n  /** color */\n  color?: string;\n  /** @default 50px */\n  /** size */\n  size?: string;\n  /** @default 2px */\n  /** stroke width */\n  borderWidth?: string;\n}\n\nexport const rotate = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst StyledSpinner = styled.div<SpinnerProps>`\n  width: ${props => props.size};\n  height: ${props => props.size};\n\n  border: ${props => props.borderWidth} solid #eee;\n  border-top: ${props => props.borderWidth} solid\n    ${props => props.color || themeGet('colors.primary')(props)};\n  border-radius: 50%;\n\n  animation: ${rotate} 1s infinite linear;\n`;\n\nexport const Spinner = ({\n  color,\n  size = '50px',\n  borderWidth = '2px',\n}: SpinnerProps) => (\n  <StyledSpinner size={size} borderWidth={borderWidth} color={color} />\n);\ntry {\n    // @ts-ignore\n    Spinner.displayName = \"Spinner\";\n    // @ts-ignore\n    Spinner.__docgenInfo = { \"description\": \"\", \"displayName\": \"Spinner\", \"props\": { \"color\": { \"defaultValue\": null, \"description\": \"color\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"size\": { \"defaultValue\": { value: \"50px\" }, \"description\": \"size\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"borderWidth\": { \"defaultValue\": { value: \"2px\" }, \"description\": \"stroke width\", \"name\": \"borderWidth\", \"required\": false, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/elements/Spinner/Spinner.tsx#Spinner\"] = { docgenInfo: Spinner.__docgenInfo, name: \"Spinner\", path: \"src/components/elements/Spinner/Spinner.tsx#Spinner\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAAA;;;;;;;;ACmDA;AACA;AAGA;;;;;;;;AAQA;AACA;AAGA;ACpBA;AACA;AACA;AACA;AACA;AACA;AAcA;AA6CA;;;;AChFA;AACA;AACA;AACA;AAGA;AACA;;;AAKA;;;;;;;;;;;;;;;;ACgCA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAeA;AAIA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;;AAIA;AACA;;AAIA;;;;;;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAGA","sourceRoot":""}