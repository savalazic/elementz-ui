{"version":3,"file":"main.d8e9a7b021df9d727258.bundle.js","sources":["webpack:///./src/components/wrappers/LoadingWrapper/LoadingWrapper.tsx","webpack:///./src/components/elements/Text/Text.tsx","webpack:///./src/components/elements/Button/Button.tsx","webpack:///./src/components/elements/Spinner/Spinner.tsx"],"sourcesContent":["import React, { Component } from 'react';\n\nexport interface LoadingWrapperProps {\n  /** loading state */\n  isLoading: boolean;\n  /** children */\n  children: ((params: { isLoading: boolean }) => React.ReactNode);\n}\n\nexport class LoadingWrapper extends Component<LoadingWrapperProps> {\n  public render() {\n    return this.props.children({\n      isLoading: this.props.isLoading,\n    });\n  }\n}\ntry {\n    // @ts-ignore\n    LoadingWrapper.displayName = \"LoadingWrapper\";\n    // @ts-ignore\n    LoadingWrapper.__docgenInfo = { \"description\": \"\", \"displayName\": \"LoadingWrapper\", \"props\": { \"children\": { \"defaultValue\": null, \"description\": \"children\", \"name\": \"children\", \"required\": true, \"type\": { \"name\": \"((params: { isLoading: boolean; }) => any) | (string & ((params: { isLoading: boolean; }) => any)) | (number & ((params: { isLoading: boolean; }) => any)) | (false & ((params: { isLoading: boolean; }) => any)) | (true & ((params: { ...; }) => any)) | (ReactElement<...> & ((params: { ...; }) => any)) | (ReactNodeArra...\" } }, \"isLoading\": { \"defaultValue\": null, \"description\": \"loading state\", \"name\": \"isLoading\", \"required\": true, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/wrappers/LoadingWrapper/LoadingWrapper.tsx#LoadingWrapper\"] = { docgenInfo: LoadingWrapper.__docgenInfo, name: \"LoadingWrapper\", path: \"src/components/wrappers/LoadingWrapper/LoadingWrapper.tsx#LoadingWrapper\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react';\nimport styled from 'styled-components';\nimport { rem, stripUnit, ellipsis } from 'polished';\nimport { themeGet } from '../../../utils/theme-helpers';\n\nexport enum TextTagEnum {\n  p = 'p',\n  span = 'span',\n  strong = 'strong',\n  em = 'em',\n  h1 = 'h1',\n  h2 = 'h2',\n  h3 = 'h3',\n  h4 = 'h4',\n  h5 = 'h5',\n  h6 = 'h6',\n}\n\nexport interface TextProps {\n  /** @default p */\n  /** tag of text */\n  tag?:\n    | 'p'\n    | 'span'\n    | 'strong'\n    | 'em'\n    | 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'h5'\n    | 'h6';\n  /** content */\n  children: React.ReactNode;\n  /** if text should be uppercased */\n  uppercase?: boolean;\n  /** if text should be underlined */\n  underline?: boolean;\n  /** if text should be truncated... */\n  truncate?: string;\n}\n\nconst StyledText = styled.p<TextProps & { as: string }>`\n  text-decoration: ${props => props.underline && 'underline'};\n  text-transform: ${props => props.uppercase && 'uppercase'};\n  ${props => props.truncate && ellipsis(props.truncate)};\n\n  ${props => {\n    if (props.as && props.as.startsWith('h')) {\n      return `\n        margin-top: ${themeGet('typography.textMargin')(props) * 1.2 * 1.5}px;\n        line-height: ${themeGet('typography.headingLineHeight')(props)}em;\n      `;\n    }\n\n    return `\n      font-size: ${rem(themeGet('typography.fontSize')(props))};\n      margin-bottom: ${themeGet('typography.textMargin')(props)}px;\n      line-height: ${themeGet('typography.paragraphLineHeight')(props)}em;\n    `;\n  }}\n\n  ${props => {\n    const hFontSize = rem(themeGet('typography.headingFontSize')(props));\n    const textMargin: any = stripUnit(themeGet('typography.textMargin')(props));\n\n    if (props.as === TextTagEnum.h1) {\n      return `\n        font-size: ${hFontSize};\n        margin-bottom: ${textMargin * 1.2}px;\n      `;\n    }\n    if (props.as === TextTagEnum.h2) {\n      return `\n        font-size: ${(stripUnit(hFontSize) as number) / 1.3}rem;\n        margin-bottom: ${(textMargin * 1.2) / 1.3}px;\n      `;\n    }\n    if (props.as === TextTagEnum.h3) {\n      return `\n        font-size: ${(stripUnit(hFontSize) as number) / 1.5}rem;\n        margin-bottom: ${(textMargin * 1.2) / 1.5}px;\n      `;\n    }\n    if (props.as === TextTagEnum.h4) {\n      return `\n        font-size: ${(stripUnit(hFontSize) as number) / 1.7}rem;\n        margin-bottom: ${(textMargin * 1.2) / 1.7}px;\n      `;\n    }\n    if (props.as === TextTagEnum.h5) {\n      return `\n        font-size: ${(stripUnit(hFontSize) as number) / 1.8}rem;\n        margin-bottom: ${(textMargin * 1.2) / 1.8}px;\n      `;\n    }\n    if (props.as === TextTagEnum.h6) {\n      return `\n        font-size: ${(stripUnit(hFontSize) as number) / 2}rem;\n        margin-bottom: ${(textMargin * 1.2) / 2}px;\n      `;\n    }\n\n    return null;\n  }};\n`;\n\nexport const Text = ({\n  tag = TextTagEnum.p,\n  children,\n  uppercase,\n  underline,\n  truncate,\n  ...rest\n}: TextProps &\n  React.HTMLAttributes<HTMLParagraphElement | HTMLSpanElement>) => {\n  return (\n    <StyledText\n      as={tag}\n      uppercase={uppercase}\n      underline={underline}\n      truncate={truncate}\n      {...rest}\n    >\n      {children}\n    </StyledText>\n  );\n};\ntry {\n    // @ts-ignore\n    Text.displayName = \"Text\";\n    // @ts-ignore\n    Text.__docgenInfo = { \"description\": \"\", \"displayName\": \"Text\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/elements/Text/Text.tsx#Text\"] = { docgenInfo: Text.__docgenInfo, name: \"Text\", path: \"src/components/elements/Text/Text.tsx#Text\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react';\nimport styled from 'styled-components';\nimport { darken, lighten } from 'polished';\n\nimport {\n  setDimensions,\n  alignVertical,\n  setDisabled,\n} from '../../../utils/style-helpers';\nimport { getButtonColor } from './buttonHelpers';\nimport { LoadingWrapper } from '../../wrappers';\nimport { Spinner } from '../Spinner';\n\nexport enum ButtonSizeEnum {\n  normal = 'normal',\n  small = 'small',\n  large = 'large',\n}\n\nexport enum ButtonTypeEnum {\n  default = 'default',\n  primary = 'primary',\n  success = 'success',\n  warning = 'warning',\n  danger = 'danger',\n}\n\nexport interface ButtonProps {\n  /** @default normal */\n  /** button size */\n  size?: 'normal' | 'small' | 'large';\n  /** button type */\n  type?: 'default' | 'primary' | 'success' | 'warning' | 'danger';\n  /** ghost */\n  ghost?: boolean;\n  /** rounded */\n  rounded?: boolean;\n  /** circle */\n  circle?: string;\n  /** fluid */\n  fluid?: boolean;\n  /** text */\n  text?: boolean;\n  /** align vertical - used if button has more elements */\n  alignVertical?: boolean;\n  /** href link */\n  href?: any;\n  /** content */\n  children: React.ReactNode;\n}\n\nexport interface LoadingButtonProps {\n  /** loading state */\n  isLoading?: boolean;\n}\n\nconst StyledButton = styled.button<ButtonProps>`\n  border: none;\n  margin: 0;\n  padding: 0.6em 1.3em 0.6em;\n  width: auto;\n  overflow: visible;\n  font: inherit;\n  text-decoration: none;\n  text-align: center;\n  line-height: inherit;\n  -webkit-appearance: none;\n  outline: none;\n  user-select: none;\n  cursor: pointer;\n  position: relative;\n\n  color: ${props =>\n    (props.ghost && (props.type && props.theme[props.type])) || 'white'};\n  color: ${props =>\n    !props.ghost && props.type === ButtonTypeEnum.default && 'black'};\n  color: ${props => props.text && props.theme.primary};\n\n  background-color: ${props =>\n    getButtonColor({ theme: props.theme, type: props.type })};\n  background-color: ${props => props.ghost && 'transparent'};\n  background-color: ${props => props.text && 'transparent'};\n\n  border: ${props =>\n    props.ghost &&\n    `1px solid ${getButtonColor({ theme: props.theme, type: props.type })}`};\n\n  border-radius: ${props => props.rounded && '20px'};\n  border-radius: ${props => props.circle && '50%'};\n\n  width: ${props => props.fluid && '100%'};\n\n  ${props => props.alignVertical && alignVertical()}\n\n  ${props => props.circle && setDimensions(props.circle, props.circle)}\n  padding: ${props => props.circle && '0px'};\n  line-height: ${props => props.circle && '100%'};\n\n  ${props => props.disabled && setDisabled()};\n\n  font-size: ${props => {\n    if (props.size === ButtonSizeEnum.normal) {\n      return '1rem';\n    }\n    if (props.size === ButtonSizeEnum.small) {\n      return '0.8rem';\n    }\n    if (props.size === ButtonSizeEnum.large) {\n      return '1.2rem';\n    }\n    return;\n  }};\n\n  transition: background-color 200ms, color 200ms;\n\n  &:hover {\n    background-color: ${props =>\n      !props.ghost\n        ? darken(0.1, getButtonColor({ theme: props.theme, type: props.type }))\n        : getButtonColor({ theme: props.theme, type: props.type })};\n    background-color: ${props => props.text && 'transparent'};\n    color: ${props => props.ghost && 'white'};\n    color: ${props => props.text && darken(0.1, props.theme.primary)}\n  }\n\n  &:focus {\n    background-color: ${props =>\n      lighten(0.05, getButtonColor({ theme: props.theme, type: props.type }))};\n    background-color: ${props => props.text && 'transparent'};\n    color: ${props => props.ghost && 'white'};\n    color: ${props => props.text && lighten(0.05, props.theme.primary)}\n  }\n\n  &:active {\n    background-color: ${props =>\n      darken(0.1, getButtonColor({ theme: props.theme, type: props.type }))};\n    background-color: ${props => props.text && 'transparent'};\n    color: ${props => props.ghost && 'white'};\n    color: ${props => props.text && lighten(0.05, props.theme.primary)}\n  }\n`;\n\nconst StyledLoadingButton = styled(StyledButton)<LoadingButtonProps>`\n  ${props => props.isLoading && setDisabled()};\n  overflow: hidden;\n`;\n\nexport const Button = ({\n  children,\n  href,\n  rounded,\n  circle,\n  fluid,\n  ghost,\n  type = 'default',\n  disabled,\n  text,\n  alignVertical: alignVerticalProp,\n  size = ButtonSizeEnum.normal,\n  ...rest\n}: ButtonProps &\n  React.ButtonHTMLAttributes<HTMLButtonElement> &\n  React.AnchorHTMLAttributes<HTMLAnchorElement>) => {\n  return (\n    <StyledButton\n      as={href && 'a'}\n      href={href}\n      size={size}\n      type={type}\n      rounded={rounded}\n      circle={circle}\n      ghost={ghost}\n      fluid={fluid}\n      disabled={disabled}\n      text={text}\n      alignVertical={alignVerticalProp}\n      {...rest}\n    >\n      {children}\n    </StyledButton>\n  );\n};\n\nexport const LoadingButton = ({\n  isLoading: isLoadingProp = false,\n  children,\n  ...rest\n}: LoadingButtonProps &\n  ButtonProps &\n  React.ButtonHTMLAttributes<HTMLButtonElement> &\n  React.AnchorHTMLAttributes<HTMLAnchorElement>) => (\n  <LoadingWrapper isLoading={isLoadingProp}>\n    {({ isLoading }) => (\n      <StyledLoadingButton isLoading={isLoading} {...rest}>\n        {isLoading ? <Spinner size=\"15px\" /> : <span>{children}</span>}\n      </StyledLoadingButton>\n    )}\n  </LoadingWrapper>\n);\ntry {\n    // @ts-ignore\n    Button.displayName = \"Button\";\n    // @ts-ignore\n    Button.__docgenInfo = { \"description\": \"\", \"displayName\": \"Button\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/elements/Button/Button.tsx#Button\"] = { docgenInfo: Button.__docgenInfo, name: \"Button\", path: \"src/components/elements/Button/Button.tsx#Button\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    LoadingButton.displayName = \"LoadingButton\";\n    // @ts-ignore\n    LoadingButton.__docgenInfo = { \"description\": \"\", \"displayName\": \"LoadingButton\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/elements/Button/Button.tsx#LoadingButton\"] = { docgenInfo: LoadingButton.__docgenInfo, name: \"LoadingButton\", path: \"src/components/elements/Button/Button.tsx#LoadingButton\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { themeGet } from '../../../utils/theme-helpers';\n\nexport interface SpinnerProps {\n  /** color */\n  color?: string;\n  /** @default 50px */\n  /** size */\n  size?: string;\n  /** @default 2px */\n  /** stroke width */\n  borderWidth?: string;\n}\n\nexport const rotate = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst StyledSpinner = styled.div<SpinnerProps>`\n  width: ${props => props.size};\n  height: ${props => props.size};\n\n  border: ${props => props.borderWidth} solid #eee;\n  border-top: ${props => props.borderWidth} solid\n    ${props => props.color || themeGet('colors.primary')(props)};\n  border-radius: 50%;\n\n  animation: ${rotate} 1s infinite linear;\n`;\n\nexport const Spinner = ({\n  color,\n  size = '50px',\n  borderWidth = '2px',\n}: SpinnerProps) => (\n  <StyledSpinner size={size} borderWidth={borderWidth} color={color} />\n);\ntry {\n    // @ts-ignore\n    Spinner.displayName = \"Spinner\";\n    // @ts-ignore\n    Spinner.__docgenInfo = { \"description\": \"\", \"displayName\": \"Spinner\", \"props\": { \"color\": { \"defaultValue\": null, \"description\": \"color\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"size\": { \"defaultValue\": { value: \"50px\" }, \"description\": \"size\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"borderWidth\": { \"defaultValue\": { value: \"2px\" }, \"description\": \"stroke width\", \"name\": \"borderWidth\", \"required\": false, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/elements/Spinner/Spinner.tsx#Spinner\"] = { docgenInfo: Spinner.__docgenInfo, name: \"Spinner\", path: \"src/components/elements/Spinner/Spinner.tsx#Spinner\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAAA;AC2CA;AACA;AACA;AACA;AACA;AACA;AAcA;AA6CA;;;;;;;;;;;;;;;;ACnCA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAeA;AAIA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;;AAIA;AACA;;AAIA;;;;;;;AC3HA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAGA","sourceRoot":""}